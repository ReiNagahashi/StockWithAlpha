<!DOCTYPE html>

<html>
    <head>
        <meta charset="UTF-8">
        <title>Chart</title>
        <style>
            #dashboard_div{
                width: 600px;
                border: 1px solid #ccc;
            }
            #chart_div{
                height:400px;
                border-bottom: 1px solid #ccc;
            }
            #filter_div{
                height:50px;
            }
            .technical_title{
                margin: 10px;
                color: gray;
            }
            .bottom_chart{
                border-bottom: 1px solid #ccc;
            }
        </style>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['corechart', 'controls']});
            var config = {
                // Ajaxを使ってリアルタイムにページを更新したいときに使用
                //api:{
                 //   enable: true,
                 //  interval: 1000*3
              //  },
                candlestick:{
                    symbol: 'IBM',
                    duration: '',
                    limit: 365,
                    //カラム数はデフォルトで５としておく。そこに付け足していく感じ
                    numViews: 5,
                },
                dataTable: {
                    index: 0,
                    value: null
                },
                sma: {
                    enable: false,
                    indices: [],
                    periods: [],
                    values: []
                },
                ema:{
                    enable: false,
                    indices: [],
                    periods: [],
                    values: []
                },
                bbands: {
                    enable:false,
                    indices: [],
                    n: 20,
                    k: 2,
                    up: [],
                    mid: [],
                    down: []
                },
                volume: {
                    enable: false,
                    index: [],
                    values: []
                },
                rsi: {
                    enable: false,
                    indices: {'up': 0, 'value': 0, 'down': 0},
                    period: 14,
                    up: 70,
                    values: [],
                    down: 30
                },
                events: {
                    enable: false,
                    indices: [],
                    values: [],
                    first: null
                }
            };
            //sendでデータを取ってきて再描画するために各パラメータを初期化する
            function initConfigValues(){
                config.dataTable.index = 0;
                config.sma.indices = [];
                config.sma.values = [];
                config.ema.indices = [];
                config.ema.values = [];
                config.bbands.indices = [];
                config.bbands.up = [];
                config.bbands.mid = [];
                config.bbands.down = [];
                config.volume.index = [];
                config.rsi.indices = [];
                config.events.indices = [];
                config.events.values = [];
            }

            function drawChart(dataTable){
                var chartDiv = document.getElementById('chart_div');
                var charts = [];
                var dashboard = new google.visualization.Dashboard(chartDiv);
                var mainChart = new google.visualization.ChartWrapper({
                    chartType: 'ComboChart',
                    containerId: 'chart_div',
                    options:{
                        hAxis: {'slantedText': false},
                        legend: {'position': 'none'},
                        candlestick:{
                            fallingColor: { strokeWidth: 0, fill: '#a52714'},
                            risingColor: {strockeWidth: 0, fill: '#0f9d58'}
                        },
                        seriesType: 'candlesticks',
                        series: {}
                    },
                    view :{
                        columns: [
                            {
                                calc: function(d, rowIndex){
                                    return d.getFormattedValue(rowIndex, 0);
                                },
                                type: 'string'
                            }, 1, 2, 3, 4
                        ]
                    }
                });
                charts.push(mainChart);

                var options = mainChart.getOptions();
                var view = mainChart.getView();

                if(config.sma.enable){
                    for(i = 0; i < config.sma.indices.length; i++){
                        //既にあるチャート上にsmaデータをラインタイプで重ねる→viewのカラムにプッシュすることで実現できる
                        //各チャート上のデータはdataTableのインデックスで管理される
                        options.series[config.sma.indices[i]] = {type: "line"};
                        view.columns.push(config.candlestick.numViews + config.sma.indices[i]);
                    }
                }

                if(config.ema.enable){
                    for(i = 0; i < config.ema.indices.length; i++){
                        options.series[config.ema.indices[i]] = {type: "line"};
                        view.columns.push(config.candlestick.numViews + config.ema.indices[i]);
                    }
                }

                if(config.bbands.enable){
                    for(i = 0; i < config.bbands.indices.length; i++){
                        options.series[config.bbands.indices[i]] = {
                            type: 'line',
                            color: 'blue',
                            lineWidth: 1
                        };

                        view.columns.push(config.candlestick.numViews + config.bbands.indices[i])
                    }
                }

                        if (config.events.enable == true && config.events.indices.length > 0){
                options.series[config.events.indices[0]] = {
                    'type': 'line',
                    tooltip: 'none',
                    enableInteractivity: false,
                    lineWidth: 0
                };
                view.columns.push(config.candlestick.numViews + config.events.indices[0]);
                view.columns.push(config.candlestick.numViews + config.events.indices[1]);
            }

                if(config.volume.enable){
                    if ($('#volume_div').length == 0) {
                        $('#technical_div').append(
                            "<div id='volume_div' class='bottom_chart'>" +
                            "<span class='technical_title'>Volume</span>" +
                            "<div id='volume_chart'></div>" +
                            "</div>")
                    }
                    var volumeChart = new google.visualization.ChartWrapper({
                        'chartType': 'ColumnChart',
                        'containerId': 'volume_chart',
                        'options': {
                            'hAxis': {'slantedText': false},
                            'legend': {'position': 'none'},
                            'series': {}
                        },
                        'view': {
                            'columns': [ { 'type': 'string' }, 5]
                        }
                    });

                    charts.push(volumeChart);
                }

                if (config.rsi.enable == true) {
                if ($('#rsi_div').length == 0) {
                    $('#technical_div').append(
                            "<div id='rsi_div' class='bottom_chart'>" +
                            "<span class='technical_title'>RSI</span>" +
                            "<div id='rsi_chart'></div>" +
                            "</div>")
                }
                var up = config.candlestick.numViews + config.rsi.indices['up'];
                var value = config.candlestick.numViews + config.rsi.indices['value'];
                var down = config.candlestick.numViews + config.rsi.indices['down'];
                var rsiChart = new google.visualization.ChartWrapper({
                    'chartType': 'LineChart',
                    'containerId': 'rsi_chart',
                    'options': {
                        'hAxis': {'slantedText': false},
                        'legend': {'position': 'none'},
                        'series': {
                            0: {color: 'black', lineWidth: 1},
                            1: {color: '#e2431e'},
                            2: {color: 'black', lineWidth: 1}
                        }
                    },
                    'view': {
                        'columns': [ { 'type': 'string' }, up, value, down]
                    }
                });
                charts.push(rsiChart)
            }


                var controlWrapper = new google.visualization.ControlWrapper({
                    'controlType': 'ChartRangeFilter',
                    'containerId': 'filter_div',
                    'options': {
                        'filterColumnIndex': 0,
                        'ui': {
                            'chartType': 'LineChart',
                            'chartView': {
                                'columns': [0, 4]
                            }
                        }
                    }
                });

                dashboard.bind(controlWrapper, charts);
                dashboard.draw(dataTable)
            }
            //データを取ってきて描画 
            function send(){
                // enableがfalseの場合はAJAXがデータを取ってこないようにする
                //if(!config.api.enable) return
                //以下で辞書paramsに任意のフィールドを設定してあげる
                //→そのフィールドをもとにバックエンドがrequestポインタを通じてデータを取ってくる
                var params = {
                    "symbol": config.candlestick.symbol,
                    "limit": config.candlestick.limit,
                    "duration": config.candlestick.duration,
                }

                if(config.sma.enable){
                    params["sma"] = true;
                    params["smaPeriod1"] = config.sma.periods[0];
                    params["smaPeriod2"] = config.sma.periods[1];
                    params["smaPeriod3"] = config.sma.periods[2];
                }

                if(config.ema.enable){
                    params["ema"] = true;
                    params["emaPeriod1"] = config.ema.periods[0];
                    params["emaPeriod2"] = config.ema.periods[1];
                    params["emaPeriod3"] = config.ema.periods[2];
                }

                if(config.bbands.enable){
                    params["bbands"] = true;
                    params["bbandsN"] = config.bbands.n;
                    params["bbandsK"] = config.bbands.k;
                }
                if(config.rsi.enable){
                    params["rsi"] = true;
                    params["rsiPeriod"] = config.rsi.period;
                }
                if(config.events.enable){
                    params["events"] = true;
                }
                $.get("/api/candle/", params).done(function(data){
                    initConfigValues();
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('date', 'Date');
                    dataTable.addColumn('number', 'Low');
                    dataTable.addColumn('number', 'Open');
                    dataTable.addColumn('number', 'Close');
                    dataTable.addColumn('number', 'High');
                    dataTable.addColumn('number', 'Volume');
                    //データテーブルに値を書き込んでいく dataは構造体のjson用記述のところを参照している
                    if(data["smas"] != undefined){
                        for(i = 0; i < data["smas"].length; i++){
                            var smaData = data["smas"][i];
                            if(smaData.length == 0) continue;
                            //sma用に新たにチャートに表示させるためのインデックスを用意するために、indexをインクリメント
                            config.dataTable.index++;
                            config.sma.indices[i] = config.dataTable.index;
                            dataTable.addColumn("number", "SMA" + smaData["period"].toString());
                            config.sma.values[i] = smaData["values"];
                        }
                    }

                    if(data["emas"] != undefined){
                        for(i = 0; i < data["emas"].length; i++){
                            var emaData = data["emas"][i];

                            if(emaData.length == 0) continue;
                            config.dataTable.index++;
                            config.ema.indices[i] = config.dataTable.index;
                            dataTable.addColumn("number", "EMA" + emaData["period"].toString());
                            config.ema.values[i] = emaData["values"];
                        }
                    }

                    if(data["bbands"] != undefined){
                        var n = data["bbands"]["n"];
                        var k = data["bbands"]["k"];
                        var up = data["bbands"]["up"];
                        var mid = data["bbands"]["mid"];
                        var down = data["bbands"]["down"];
                        config.dataTable.index++;
                        config.bbands.indices[0] = config.dataTable.index;
                        config.dataTable.index++;
                        config.bbands.indices[1] = config.dataTable.index;
                        config.dataTable.index++;
                        config.bbands.indices[2] = config.dataTable.index;
                        
                        dataTable.addColumn('number', 'BBands Up(' + n + ', ' + k + ')');
                        dataTable.addColumn('number', 'BBands Mid(' + n + ', ' + k + ')');
                        dataTable.addColumn('number', 'BBands Down(' + n + ', ' + k + ')');
                        
                        config.bbands.up = up;
                        config.bbands.mid = mid;
                        config.bbands.down = down;
                    }

                if (data['events'] != undefined) {
                    config.dataTable.index += 1;
                    config.events.indices[0] = config.dataTable.index;
                    config.dataTable.index += 1;
                    config.events.indices[1] = config.dataTable.index;

                    config.events.values = data['events']['signals'];
                    config.events.first = config.events.values.shift();

                    dataTable.addColumn('number', 'Marker');
                    dataTable.addColumn({type:'string', role:'annotation'});

                    if (data['events']['profit'] != undefined) {
                        profit = "$" + String(Math.round(data['events']['profit'] * 100) / 100);
                        $('#profit').html("Change:" + profit);
                    }
                }
                
                if (data['rsi'] != undefined ){
                    config.dataTable.index += 1;
                    config.rsi.indices['up'] = config.dataTable.index;
                    config.dataTable.index += 1;
                    config.rsi.indices['value'] = config.dataTable.index;
                    config.dataTable.index += 1;
                    config.rsi.indices['down'] = config.dataTable.index;
                    config.rsi.period = data['rsi']['period'];
                    config.rsi.values = data['rsi']['values'];
                    dataTable.addColumn('number', 'RSI Thread');
                    dataTable.addColumn('number', 'RSI(' + config.rsi.period + ')');
                    dataTable.addColumn('number', 'RSI Thread');
                }
                    var googleChartData = [];
                    var candles = data["candles"];

                    for(var i = 0; i < candles.length; i++){
                        var candle = candles[i];
                        var date = new Date(candle.date_time);
                        //🚨dataはバックエンドに登録してある各フィールド名
                        //一方でdatasはチャートで表示させ用としている各データを持つリスト。
                        //これをdataTable.indexの値をもつconfigの各フィールドのindicesに格納している. 
                        var datas = [date, candle.low, candle.open, candle.close, candle.high, candle.volume];

                        //以下の各フィールドはenableがtrueになったときにdatasに各フィールドをプッシュする
                        //その上で、そのプッシュされた各フィールドを描画するためにdataTable.indexを参照している
                        if(data["smas"] != undefined){
                            for(var j = 0; j < config.sma.values.length; j++){
                                if(config.sma.values[j][i] == 0){
                                    datas.push(null);
                                }else{
                                    datas.push(config.sma.values[j][i]);
                                }
                            }
                        }

                        if(data["emas"] != undefined){
                            for(j = 0; j < config.ema.values.length; j++){
                                if(config.ema.values[j][i] == 0){
                                    datas.push(null);
                                }else{
                                    datas.push(config.ema.values[j][i]);
                                }
                            }
                        }

                        if(data['bbands'] != undefined){
                            if(config.bbands.up[i] == 0){
                                datas.push(null);
                            }else{
                                datas.push(config.bbands.up[i]);
                            }
                            if(config.bbands.mid[i] == 0){
                                datas.push(null);
                            }else{
                                datas.push(config.bbands.mid[i]);
                            }
                            if(config.bbands.down[i] == 0){
                                datas.push(null);
                            }else{
                                datas.push(config.bbands.down[i]);
                            }
                        }

                        if(data['events'] != undefined){
                            var event = config.events.first;
                            if(event == undefined){
                                datas.push(null);
                                datas.push(null);
                            } else if(event.time == candle.date_time){
                                // candle.high + 1　とすることで、SELL, BUYのシンボルがキャンドルの少し上で表示させられる
                                datas.push(candle.high + 1);
                                datas.push(event.side);
                                config.events.first = config.events.values.shift();
                            }else{
                                datas.push(null);
                                datas.push(null);
                            }
                        }

                        if(data['rsi'] != undefined){
                            datas.push(config.rsi.up);
                            if(config.rsi.values[i] == 0){
                                datas.push(null);
                            }else{
                                datas.push(config.rsi.values[i]);
                            }
                            datas.push(config.rsi.down);
                        }

                        googleChartData.push(datas);
                    }

                    dataTable.addRows(googleChartData);
                    drawChart(dataTable);
                })
            }

            function changeDuration(s){
                config.candlestick.duration = s;
                send();
            }

            //setInterval(send, 1000*3)
            window.onload = function (){
                send()
                //カーソルがチャート上に乗った場合にenableがfalseになる
                //$('#dashboard_div').mouseenter(function() {
                    //config.api.enable = false;
                //}).mouseleave(function(){
                    //config.api.enable = true;
                //});

                // Smaに関するjquery
                $('#inputSma').change(function() {
                    config.sma.enable = this.checked;
                    send();
                });

                $("#inputSmaPeriod1").change(function() {
                    config.sma.periods[0] = this.value;
                    send();
                })
                $("#inputSmaPeriod2").change(function() {
                    config.sma.periods[1] = this.value;
                    send();
                })
                $("#inputSmaPeriod3").change(function() {
                    config.sma.periods[2] = this.value;
                    send();
                })

                // Emaに関するjquery
                $('#inputEma').change(function() {
                    config.ema.enable = this.checked;
                    send();
                });

                $("#inputEmaPeriod1").change(function() {
                    config.ema.periods[0] = this.value;
                    send();
                })
                $("#inputEmaPeriod2").change(function() {
                    config.ema.periods[1] = this.value;
                    send();
                })
                $("#inputEmaPeriod3").change(function() {
                    config.ema.periods[2] = this.value;
                    send();
                }) 

                $('#inputBBands').change(function() {
                    config.bbands.enable = this.checked;
                    send();
                });

                $("#inputBBandsN").change(function() {
                    config.bbands.n = this.value;
                    send();
                });

                $("#inputBBandsK").change(function() {
                    config.bbands.n = this.value;
                    send();
                });
                //出来高チャートの表示のトグル
                $("#inputVolume").change(function(){
                    if(this.checked){
                        config.volume.enable = true;
                        send();
                    }
                    else{
                        config.volume.enable = false;
                        $('#volume_div').remove();
                    }
                })
                $("#inputRsi").change(function() {
                    if(this.checked){
                        config.rsi.enable = true;
                        send();
                    }else{
                        config.rsi.enable = false;
                        $("#rsi_div").remove();
                    }

                });
                $("#inputRsiPeriod").change(function(){
                    config.rsi.period = this.value;
                    send();
                });

                $("#inputEvents").change(function() {
                    if(this.checked){
                        config.events.enable = true;
                        send();
                    }else{
                        config.events.enable = false;
                        $("#events_div").remove();
                    }

                });
                $("#inputEventsPeriod").change(function(){
                    config.events.period = this.value;
                    send();
                });
            }
        </script>
    </head>
    <body>
        <div>
            <button onclick="changeDuration('day');">Day</button>
            <button onclick="changeDuration('week');">Week</button>
        </div>
        <div>
            SMA <input type="checkbox" id="inputSma">
            Period <input type="text" id="inputSmaPeriod1" value="7" style="...">
            <input type="text" id="inputSmaPeriod2" value="14" style="...">
            <input type="text" id="inputSmaPeriod3" value="50" style="...">
        </div>
        <div>
            EMA <input type="checkbox" id="inputEma">
            Period <input type="text" id="inputEmaPeriod1" value="7" style="...">
            <input type="text" id="inputEmaPeriod2" value="14" style="...">
            <input type="text" id="inputEmaPeriod3" value="50" style="...">
        </div>
        <div>
            BBands <input type="checkbox" id="inputBBands">
            N <input type="text" id="inputBBandsN" value="20" style="...">
            K <input type="text" id="inputBBandsK" value="2" style="...">
        </div>
        <div>
            Volume <input type="checkbox" id="inputVolume">
        </div>
        <div>
            Rsi <input type="checkbox" id="inputRsi">
            Period <input type="text" id="inputRsiPeriod" value="14" style="width: 15px;">
        </div>
        <div>
            Events <input type="checkbox" id="inputEvents"> <div id="profit"></div>
        </div>
        <div id="dashboard_div">
            <div id="chart_div"></div>
            <div id="technical_div"></div>
            <div id="filter_div"></div>
            <div id="events_div"></div>
            
        </div>
        
    </body>
</html>
