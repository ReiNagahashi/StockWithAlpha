<!DOCTYPE html>

<html>
    <head>
        <meta charset="UTF-8">
        <title>Chart</title>
        <style>
            #dashboard_div{
                width: 600px;
                border: 1px solid #ccc;
            }
            #chart_div{
                height:400px;
                border-bottom: 1px solid #ccc;
            }
            #filter_div{
                height:50px;
            }
        </style>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['corechart', 'controls']});
            var config = {
                api:{
                    enable: true,
                    interval: 1000*3
                },
                candlestick:{
                    symbol: 'IBM',
                    duration: '',
                    limit: 365,
                    //カラム数はデフォルトで５としておく。そこに付け足していく感じ
                    numViews: 5,
                },
                dataTable: {
                    index: 0,
                    value: null
                },
                sma: {
                    enable: false,
                    indices: [],
                    periods: [],
                    values: []
                },
                ema:{
                    enable: false,
                    indices: [],
                    periods: [],
                    values: []
                }
            };
            //sendでデータを取ってきて再描画するために各パラメータを初期化する
            function initConfigValues(){
                config.dataTable.index = 0;
                config.sma.indices = [];
                config.sma.values = [];
                config.ema.indices = [];
                config.ema.values = [];
            }

            function drawChart(dataTable){
                var chartDiv = document.getElementById('chart_div');
                var charts = [];
                var dashboard = new google.visualization.Dashboard(chartDiv);
                var mainChart = new google.visualization.ChartWrapper({
                    chartType: 'ComboChart',
                    containerId: 'chart_div',
                    options:{
                        hAxis: {'slantedText': false},
                        legend: {'position': 'none'},
                        candlestick:{
                            fallingColor: { strokeWidth: 0, fill: '#a52714'},
                            risingColor: {strockeWidth: 0, fill: '#0f9d58'}
                        },
                        seriesType: 'candlesticks',
                        series: {}
                    },
                    view :{
                        columns: [
                            {
                                calc: function(d, rowIndex){
                                    return d.getFormattedValue(rowIndex, 0);
                                },
                                type: 'string'
                            }, 1, 2, 3, 4
                        ]
                    }

                });

                charts.push(mainChart);

                var options = mainChart.getOptions();
                var view = mainChart.getView();

                if(config.sma.enable){
                    for(i = 0; i < config.sma.indices.length; i++){
                        //既にあるチャート上にsmaデータをラインタイプで重ねる→viewのカラムにプッシュすることで実現できる
                        //各チャート上のデータはdataTableのインデックスで管理される
                        options.series[config.sma.indices[i]] = {type: "line"};
                        view.columns.push(config.candlestick.numViews + config.sma.indices[i]);
                    }
                }

                if(config.ema.enable){
                    for(i = 0; i < config.ema.indices.length; i++){
                        options.series[config.ema.indices[i]] = {type: "line"};
                        view.columns.push(config.candlestick.numViews + config.ema.indices[i]);
                    }
                }

                var controlWrapper = new google.visualization.ControlWrapper({
                    'controlType': 'ChartRangeFilter',
                    'containerId': 'filter_div',
                    'options': {
                        'filterColumnIndex': 0,
                        'ui': {
                            'chartType': 'LineChart',
                            'chartView': {
                                'columns': [0, 4]
                            }
                        }
                    }
                });

                dashboard.bind(controlWrapper, charts);
                dashboard.draw(dataTable)
            }
            //データを取ってきて描画 
            function send(){
                // enableがfalseの場合はAJAXがデータを取ってこないようにする
                if(!config.api.enable) return

                var params = {
                    "symbol": config.candlestick.symbol,
                    "limit": config.candlestick.limit,
                    "duration": config.candlestick.duration,
                }

                if(config.sma.enable){
                    params["sma"] = true;
                    params["smaPeriod1"] = config.sma.periods[0];
                    params["smaPeriod2"] = config.sma.periods[1];
                    params["smaPeriod3"] = config.sma.periods[2];
                }

                if(config.ema.enable){
                    params["ema"] = true;
                    params["emaPeriod1"] = config.ema.periods[0];
                    params["emaPeriod2"] = config.ema.periods[1];
                    params["emaPeriod3"] = config.ema.periods[2];
                }

                $.get("/api/candle/", params).done(function(data){
                    initConfigValues();
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn('date', 'Date');
                    dataTable.addColumn('number', 'Low');
                    dataTable.addColumn('number', 'Open');
                    dataTable.addColumn('number', 'Close');
                    dataTable.addColumn('number', 'High');
                    dataTable.addColumn('number', 'Volume');
                    //データテーブルに値を書き込んでいく
                    if(data["smas"] != undefined){
                        for(i = 0; i < data["smas"].length; i++){
                            var smaData = data["smas"][i];

                            if(smaData.length == 0) continue;
                            //sma用に新たにチャートに表示させるためのインデックスをインクリメント
                            config.dataTable.index++;
                            config.sma.indices[i] = config.dataTable.index;
                            dataTable.addColumn("number", "SMA" + smaData["period"].toString());
                            config.sma.values[i] = smaData["values"];
                        }
                    }

                    if(data["emas"] != undefined){
                        for(i = 0; i < data["emas"].length; i++){
                            var emaData = data["emas"][i];

                            if(emaData.length == 0) continue;
                            config.dataTable.index++;
                            config.ema.indices[i] = config.dataTable.index;
                            dataTable.addColumn("number", "EMA" + emaData["period"].toString());
                            config.ema.values[i] = emaData["values"];
                        }
                    }

                    var googleChartData = [];
                    var candles = data["candles"];

                    for(var i = 0; i < candles.length; i++){
                        var candle = candles[i];
                        var date = new Date(candle.date_time);
                        var datas = [date, candle.low, candle.open, candle.close, candle.high, candle.volume];

                        if(data["smas"] != undefined){
                            for(j = 0; j < config.sma.values.length; j++){
                                if(config.sma.values[j][i] == 0){
                                    datas.push(null);
                                }else{
                                    datas.push(config.sma.values[j][i]);
                                }
                            }
                        }

                        if(data["emas"] != undefined){
                            for(j = 0; j < config.ema.values.length; j++){
                                if(config.ema.values[j][i] == 0){
                                    datas.push(null);
                                }else{
                                    datas.push(config.ema.values[j][i]);
                                }
                            }
                        }
                        googleChartData.push(datas);
                    }

                    dataTable.addRows(googleChartData);
                    drawChart(dataTable)
                })
            }

            function changeDuration(s){
                config.candlestick.duration = s;
                send();
            }

            //setInterval(send, 1000*3)
            window.onload = function (){
                send()
                //カーソルがチャート上に乗った場合にenableがfalseになる
                $('#dashboard_div').mouseenter(function() {
                    config.api.enable = false;
                }).mouseleave(function(){
                    config.api.enable = true;
                });

                // Smaに関するjquery
                $('#inputSma').change(function() {
                    config.sma.enable = this.checked;
                    send();
                });

                $("#inputSmaPeriod1").change(function() {
                    config.sma.periods[0] = this.value;
                    send();
                })
                $("#inputSmaPeriod2").change(function() {
                    config.sma.periods[1] = this.value;
                    send();
                })
                $("#inputSmaPeriod3").change(function() {
                    config.sma.periods[2] = this.value;
                    send();
                })

                // Emaに関するjquery
                $('#inputEma').change(function() {
                    config.ema.enable = this.checked;
                    send();
                });

                $("#inputEmaPeriod1").change(function() {
                    config.ema.periods[0] = this.value;
                    send();
                })
                $("#inputEmaPeriod2").change(function() {
                    config.ema.periods[1] = this.value;
                    send();
                })
                $("#inputEmaPeriod3").change(function() {
                    config.ema.periods[2] = this.value;
                    send();
                })
            }
        </script>
    </head>
    <body>
        <div>
            <button onclick="changeDuration('day');">Day</button>
            <button onclick="changeDuration('week');">Week</button>
        </div>
        <div>
            SMA <input type="checkbox" id="inputSma">
            Period <input type="text" id="inputSmaPeriod1" value="7" style="width: 15px;">
            <input type="text" id="inputSmaPeriod2" value="14" style="width: 15px;">
            <input type="text" id="inputSmaPeriod3" value="50" style="width: 15px;">
        </div>
        <div>
            EMA <input type="checkbox" id="inputEma">
            Period <input type="text" id="inputEmaPeriod1" value="7" style="width: 15px;">
            <input type="text" id="inputEmaPeriod2" value="14" style="width: 15px;">
            <input type="text" id="inputEmaPeriod3" value="50" style="width: 15px;">
        </div>
        <div id="dashboard_div">
            <div id="chart_div"></div>
            <div id="filter_div"></div>
        </div>
        
    </body>
</html>
